{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "groupLocation": {
            "type": "string",
            "defaultValue": "eastus",
            "metadata": {
                "description": "Specifies the location of the Resource Group."
            }
        },
        "appId": {
            "type": "string",
            "metadata": {
                "description": "Active Directory App ID, set as MicrosoftAppId in the Web App's Application Settings."
            }
        },
        "appSecret": {
            "type": "securestring",
            "metadata": {
                "description": "Active Directory App Password, set as MicrosoftAppPassword in the Web App's Application Settings."
            }
        },
        "botId": {
            "type": "string",
            "defaultValue": "bot-azure-bot",
            "metadata": {
                "description": "The globally unique and immutable bot ID. Also used to configure the displayName of the bot, which is mutable."
            }
        },
        "newStorageAccountName": {
            "type": "string",
            "defaultValue": "stazurebotticketservice",
            "metadata": {
                "description": "The name of the Storage Account."
            }
        },
        "newAppServicePlanName": {
            "type": "string",
            "defaultValue": "plan-app-azure-bot",
            "metadata": {
                "description": "The name of the App Service Plan."
            }
        },
        "newFuncAppServicePlanName": {
            "type": "string",
            "defaultValue": "plan-func-azure-bot",
            "metadata": {
                "description": "The name of the Func App Service Plan."
            }
        },
        "newWebAppName": {
            "type": "string",
            "defaultValue": "web-azure-bot",
            "metadata": {
                "description": "The globally unique name of the Web App."
            }
        },
        "newBotAppName": {
            "type": "string",
            "defaultValue": "app-bot-azure-bot",
            "metadata": {
                "description": "The globally unique name of the Web App."
            }
        },
        "newFuncAppName": {
            "type": "string",
            "defaultValue": "func-azure-bot",
            "metadata": {
                "description": "The globally unique name of the Function App."
            }
        },
        "dbservername": {
            "type": "string",
            "defaultValue": "sql-azure-bot",
            "metadata": {
                "description": "The DB server name."
            }
        },
        "sqlDBName": {
            "type": "string",
            "defaultValue": "sqldb-azure-bot",
            "metadata": {
                "description": "The DB name."
            }
        },
        "newKeyVaultName": {
            "type": "string",
            "defaultValue": "kv-azure-bot",
            "metadata": {
                "description": "The Key Vault name."
            }
        },
        "newWorkspaceName": {
            "type": "string",
            "defaultValue": "log-azure-bot",
            "metadata": {
                "description": "The log workspace name."
            }
        },
        "administratorlogin": {
            "type": "string",
            "defaultValue": "adminuser",
            "metadata": {
                "description": "The Admin Login."
            }
        },
        "administratorLoginPassword": {
            "type": "securestring",
            "metadata": {
                "description": "The Admin Login password."
            }
        },
        "userlogin": {
            "type": "string",
            "defaultValue": "azurebot",
            "metadata": {
                "description": "The User Login."
            }
        },
        "userPassword": {
            "type": "securestring",
            "metadata": {
                "description": "The User Login."
            }
        },
        "LUISAuthoringResourceName": {
            "defaultValue": "luis-auth-azure-bot",
            "type": "String",
            "metadata": {
                "description": "The name for the LUIS Authoring resource."
            }
        },
        "LUISPredictionResourceName": {
            "defaultValue": "luis-pred-azure-bot",
            "type": "String",
            "metadata": {
                "description": "The name for the LUIS Prediction resource."
            }
        },
        "newQnaAccountName": {
            "type": "string",
			"defaultValue": "qna-azure-bot"
        },
        "newQnaAppName": {
            "type": "string",
			"defaultValue": "app-qna-azure-bot"
        },
		"newSearchName": {
			"type": "string",
			"defaultValue": "srch-azure-bot"
		}
    },
    "variables": {
        "siteHost": "[concat(parameters('newBotAppName'), '.azurewebsites.net')]",
        "botEndpoint": "[concat('https://', variables('siteHost'), '/api/messages')]",
        "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('newStorageAccountName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Sql/servers",
            "apiVersion": "2015-05-01-preview",
            "name": "[parameters('dbserverName')]",
            "location": "[parameters('groupLocation')]",
            "properties": {
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[parameters('administratorLoginPassword')]"
            },
            "resources": [
                {
                    "type": "databases",
                    "apiVersion": "2020-08-01-preview",
                    "name": "[parameters('sqlDBName')]",
                    "location": "[parameters('groupLocation')]",
                    "sku": {
                        "name": "GP_S_Gen5",
                        "tier": "GeneralPurpose",
                        "family": "Gen5",
                        "capacity": 1
                    },
                    "kind": "v12.0,user,vcore,serverless",
                    "properties": {
                        "collation": "SQL_Latin1_General_CP1_CI_AS",
                        "maxSizeBytes": 8589934592,
                        "catalogCollation": "SQL_Latin1_General_CP1_CI_AS",
                        "zoneRedundant": false,
                        "readScale": "Disabled",
                        "autoPauseDelay": 60,
                        "requestedBackupStorageRedundancy": "Local",
                        "minCapacity": 0.5,
                        "isLedgerOn": false
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', parameters('dbserverName'))]"
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.Sql/servers/firewallRules",
            "apiVersion": "2021-02-01-preview",
            "name": "[concat(parameters('dbserverName'), '/AllowAllWindowsAzureIps')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('dbserverName'))]"
            ],
            "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[parameters('newKeyVaultName')]",
            "apiVersion": "2016-10-01",
            "location": "[parameters('groupLocation')]",
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "standard"
                },
                "tenantId": "[subscription().tenantid]",
                "accessPolicies": [
                    {
                        "tenantId": "[subscription().tenantid]",
                        "objectId": "[reference(resourceId('Microsoft.Web/sites', parameters('newFuncAppName')),'2019-08-01', 'full').identity.principalId]",
                        "permissions": {
                            "keys": [],
                            "secrets": [
                                "get"
                            ],
                            "certificates": []
                        }
                    }
                ],
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": false
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('newFuncAppName'))]"
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2021-06-01-preview",
            "name": "[concat(parameters('newKeyVaultName'), '/db-password')]",
            "location": "eastus",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('newKeyVaultName'))]"
            ],
            "properties": {
                "attributes": {
                    "enabled": true
                },
                "value": "[parameters('userPassword')]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[parameters('newStorageAccountName')]",
            "location": "[parameters('groupLocation')]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "Storage"
        },
        {
            "comments": "Create a new App Service Plan",
            "type": "Microsoft.Web/serverfarms",
            "name": "[parameters('newAppServicePlanName')]",
            "apiVersion": "2018-02-01",
            "location": "[parameters('groupLocation')]",
            "sku": {
                "name": "S1",
                "tier": "Standard",
                "size": "S1",
                "family": "S",
                "capacity": 1
            },
            "kind": "functionapp",
            "properties": {
                "name": "[parameters('newAppServicePlanName')]"
            }
        },
        {
            "comments": "Create a new Function App Service Plan",
            "type": "Microsoft.Web/serverfarms",
            "name": "[parameters('newFuncAppServicePlanName')]",
            "apiVersion": "2018-02-01",
            "location": "[parameters('groupLocation')]",
            "sku": {
                "name":"Y1",
                "tier":"Dynamic",
                "size":"Y1",
                "family":"Y",
                "capacity":0
            },
            "kind": "functionapp",
            "properties": {
                "name": "[parameters('newFuncAppServicePlanName')]",
                "computeMode":"Dynamic"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2020-12-01",
            "name": "[parameters('newFuncAppName')]",
            "location": "[parameters('groupLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('newFuncAppServicePlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('newStorageAccountName'))]"
            ],
            "kind": "functionapp",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('newFuncAppServicePlanName'))]",
                "siteConfig": {
                    "appSettings": [
                    {
                        "name": "FUNCTIONS_EXTENSION_VERSION",
                        "value": "~3"
                    },
                    {
                        "name": "FUNCTIONS_WORKER_RUNTIME",
                        "value": "java"
                    },
                    {
                        "name": "AzureWebJobsStorage",
                        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('newStorageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1, ';EndpointSuffix=core.windows.net')]"
                    },
                    {
                        "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('newStorageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1, ';EndpointSuffix=core.windows.net')]"
                    },
                    {
                        "name": "WEBSITE_CONTENTSHARE",
                        "value": "[toLower(parameters('newFuncAppName'))]"
                    }
                    ],
                    "javaVersion": "11"
                }
            }
        },
        {
            "type": "Microsoft.Web/sites/providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "name": "[concat(parameters('newFuncAppName'), '/Microsoft.Insights/', 'diagnostic')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('newFuncAppName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('newWorkspaceName'))]"
            ],
            "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('newWorkspaceName'))]",
                "logs": [
                    {
                        "category": "FunctionAppLogs",
                        "enabled": true
                    }
                ],
                "metrics": [
                    {
                        "category": "AllMetrics",
                        "enabled": true
                    }
                ]
            }
        },
        {
            "comments": "Create a Web App using the new App Service Plan",
            "type": "Microsoft.Web/sites",
            "apiVersion": "2015-08-01",
            "location": "[parameters('groupLocation')]",
            "kind": "app",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('newAppServicePlanName'))]"
            ],
            "name": "[parameters('newWebAppName')]",
            "properties": {
                "name": "[parameters('newWebAppName')]",
                "serverFarmId": "[parameters('newAppServicePlanName')]",
                "siteConfig": {
                    "appSettings": [
                    ],
                    "cors": {
                        "allowedOrigins": [
                            "https://botservice.hosting.portal.azure.net",
                            "https://hosting.onecloud.azure-test.net/"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.Web/sites/providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "name": "[concat(parameters('newWebAppName'), '/Microsoft.Insights/', 'diagnostic')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('newWebAppName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('newWorkspaceName'))]"
            ],
            "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('newWorkspaceName'))]",
                "logs": [
                    {
                        "category": "AppServiceAppLogs",
                        "enabled": true
                    }
                ],
                "metrics": [
                    {
                        "category": "AllMetrics",
                        "enabled": true
                    }
                ]
            }
        },
        {
            "comments": "Create a Web App using the new App Service Plan",
            "type": "Microsoft.Web/sites",
            "apiVersion": "2015-08-01",
            "location": "[parameters('groupLocation')]",
            "kind": "app",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('newAppServicePlanName'))]"
            ],
            "name": "[parameters('newBotAppName')]",
            "properties": {
                "name": "[parameters('newBotAppName')]",
                "serverFarmId": "[parameters('newAppServicePlanName')]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "MicrosoftAppId",
                            "value": "[parameters('appId')]"
                        },
                        {
                            "name": "MicrosoftAppPassword",
                            "value": "[parameters('appSecret')]"
                        }
                    ],
                    "cors": {
                        "allowedOrigins": [
                            "https://botservice.hosting.portal.azure.net",
                            "https://hosting.onecloud.azure-test.net/",
                            "https://portal.azure.com"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.Web/sites/providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "name": "[concat(parameters('newBotAppName'), '/Microsoft.Insights/', 'diagnostic')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('newBotAppName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('newWorkspaceName'))]"
            ],
            "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('newWorkspaceName'))]",
                "logs": [
                    {
                        "category": "AppServiceAppLogs",
                        "enabled": true
                    }
                ],
                "metrics": [
                    {
                        "category": "AllMetrics",
                        "enabled": true
                    }
                ]
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "name": "[parameters('newWorkspaceName')]",
            "apiVersion": "2015-11-01-preview",
            "location": "[parameters('groupLocation')]",
            "properties": {
                "sku": {
                    "name": "pergb2018"
                },
                "retentionInDays": 30,
                "features": {
                    "searchVersion": 1,
                    "legacy": 0,
                    "enableLogAccessUsingOnlyResourcePermissions": "true"
                }
            }
        },
        {
            "apiVersion": "2021-03-01",
            "type": "Microsoft.BotService/botServices",
            "name": "[parameters('botId')]",
            "location": "global",
            "kind": "azurebot",
            "sku": {
                "name": "S1"
            },
            "properties": {
                "name": "[parameters('botId')]",
                "displayName": "[parameters('botId')]",
                "iconUrl": "https://docs.botframework.com/static/devportal/client/images/bot-framework-default.png",
                "endpoint": "[variables('botEndpoint')]",
                "msaAppId": "[parameters('appId')]",
                "luisAppIds": [],
                "schemaTransformationVersion": "1.3",
                "isCmekEnabled": false,
                "isIsolated": false
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('newAppServicePlanName'))]"
            ]
        },
        {
            "type": "Microsoft.CognitiveServices/accounts",
            "apiVersion": "2017-04-18",
            "name": "[parameters('LUISPredictionResourceName')]",
            "location": "westus",
            "sku": {
                "name": "F0"
            },
            "kind": "LUIS",
            "properties": {
                "customSubDomainName": "[parameters('LUISPredictionResourceName')]"
            }
        },
        {
            "type": "Microsoft.CognitiveServices/accounts",
            "apiVersion": "2017-04-18",
            "name": "[parameters('LUISAuthoringResourceName')]",
            "location": "westus",
            "sku": {
                "name": "F0"
            },
            "kind": "LUIS.Authoring",
            "properties": {
                "customSubDomainName": "[parameters('LUISAuthoringResourceName')]"
            }
        },
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2020-10-01",
            "name": "dbSetup",
            "location": "[parameters('groupLocation')]",
            "kind": "AzurePowerShell",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('dbservername'), parameters('sqlDBName'))]"
            ],
            "properties": {
                "forceUpdateTag": "1",
                "azPowerShellVersion": "6.4",
                "arguments": "[concat('-serverInstance', ' ', parameters('dbservername'), ' ', '-database', ' ', parameters('sqlDBName'), ' ', '-adminUsername', ' ', parameters('administratorlogin'), ' ', '-adminPassword', ' ', parameters('administratorLoginPassword'), ' ', '-userPassword', ' ', parameters('userPassword'), ' ', '-userLogin', ' ', parameters('userLogin'))]",
                "scriptContent": 
                    "param([string] $serverInstance, [string] $database, [string] $adminUsername, [string] $adminPassword, [string] $userPassword, [string] $userLogin)
                    $StringArray = \"BOT_USER_PWD=$userPassword\",\"BOT_USER_NM=$userLogin\"
                    $serverInstanceUrl = \"$serverInstance.database.windows.net\"
                    find-module sqlserver | Install-Module -AllowClobber -Force
                    Invoke-Sqlcmd -Query `
                        \"CREATE LOGIN `$(BOT_USER_NM) WITH password = '`$(BOT_USER_PWD)';\" `
                        -Variable $StringArray -ServerInstance $serverInstanceUrl `
                        -Database master -Username $adminUsername -Password $adminPassword
                    Invoke-Sqlcmd -Query `
                        \"
                        CREATE USER azurebotuser FROM LOGIN `$(BOT_USER_NM);
                        EXEC sp_addrolemember 'db_datawriter', 'azurebotuser'; 
                        EXEC sp_addrolemember 'db_datareader', 'azurebotuser';
                        GRANT CREATE TABLE TO azurebotuser;
                        GRANT SELECT, INSERT, DELETE, ALTER, EXECUTE, CONTROL ON SCHEMA::dbo TO azurebotuser;
                        \" `
                        -Variable $StringArray -ServerInstance $serverInstanceUrl `
                        -Database $database -Username $adminUsername -Password $adminPassword
                    Invoke-Sqlcmd -Query `
                        \"
                        CREATE TABLE TICKET(
                        TICKET_ID VARCHAR(10),
                        STATUS VARCHAR(10));
                        INSERT INTO TICKET VALUES ('TKT1234567', 'CLSD');
                        INSERT INTO TICKET VALUES ('TKT1234568', 'OPN');
                        INSERT INTO TICKET VALUES ('TKT1234569', 'NEW');
                        \" `
                        -ServerInstance $serverInstanceUrl -Database $database `
                        -Username $userLogin -Password $userPassword
                    ",
                "supportingScriptUris":[],
                "timeout": "PT30M",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            }
        },
                {
            "type": "Microsoft.CognitiveServices/accounts",
            "kind": "QnAMaker",
            "name": "[parameters('newQnaAccountName')]",
            "apiVersion": "2021-04-30",
            "location": "westus",
            "sku": {
                "name": "F0"
            },
            "properties": {
                "apiProperties": {
                    "qnaRuntimeEndpoint": "[concat('https://',reference(resourceId('Microsoft.Web/sites', parameters('newQnaAppName'))).hostNames[0])]"
                },
                "customSubDomainName": "[parameters('newQnaAccountName')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/Sites', parameters('newQnaAppName'))]",
                "[resourceId('Microsoft.Search/searchServices/', parameters('newSearchName'))]"
            ]
        },
        {
            "name": "[parameters('newSearchName')]",
            "type": "Microsoft.Search/searchServices",
            "apiVersion": "2015-08-19",
            "location": "[parameters('groupLocation')]",
            "tags": {},
            "properties": {
                "replicaCount": 1,
                "partitionCount": 1,
                "hostingMode": "Default"
            },
            "sku": {
                "name": "free"
            }        
		},
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2016-08-01",
            "name": "[parameters('newQnaAppName')]",
            "location": "[parameters('groupLocation')]",
            "properties": {
                "enabled": true,
                "siteConfig": {
                    "cors": {
                        "allowedOrigins": [
                            "*"
                        ]
                    }
                },
                "name": "[parameters('newQnaAppName')]",
                "serverFarmId": "[concat('/subscriptions/', subscription().SubscriptionId,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', parameters('newAppServicePlanName'))]",
                "hostingEnvironment": ""
            },
            "dependsOn": [
                "[concat('Microsoft.Web/serverfarms/', parameters('newAppServicePlanName'))]"
            ],
            "resources": [
                {
                    "apiVersion": "2015-08-01",
                    "name": "appsettings",
                    "type": "config",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', parameters('newQnaAppName'))]",
                        "[resourceId('Microsoft.Search/searchServices/', parameters('newSearchName'))]"
                    ],
                    "properties": {
                        "AzureSearchName": "[parameters('newSearchName')]",
                        "AzureSearchAdminKey": "[listAdminKeys(resourceId('Microsoft.Search/searchServices/', parameters('newSearchName')), '2015-08-19').primaryKey]",
                        "PrimaryEndpointKey": "[concat(parameters('newQnaAppName'), '-PrimaryEndpointKey')]",
                        "SecondaryEndpointKey": "[concat(parameters('newQnaAppName'), '-SecondaryEndpointKey')]",
                        "DefaultAnswer": "I don't know this. I'm stil learning.",
                        "QNAMAKER_EXTENSION_VERSION": "latest"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Web/sites/providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "name": "[concat(parameters('newQnaAppName'), '/Microsoft.Insights/', 'diagnostic')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('newQnaAppName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('newWorkspaceName'))]"
            ],
            "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('newWorkspaceName'))]",
                "logs": [
                    {
                        "category": "AppServiceAppLogs",
                        "enabled": true
                    }
                ],
                "metrics": [
                    {
                        "category": "AllMetrics",
                        "enabled": true
                    }
                ]
            }
        }
    ],
    "outputs": {}
}